{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Redovisningstexter</h1>
    <h2 id="kmom01">Kmom01</h2>
    <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h3>
    <p>
        Jag läste oopython-kursen förra våren så därifrån har man med sig en del. Utöver det har jag
        programmerat en hel del tidigare på egen hand och är ganska van med OO tankesättet.
    </p>

    <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
    <p>
        Det går att skapa ett generisk objekt med stdClass men för att möjliggöra inkapsling så är det bättre att skapa sina egna klasser.
        Det är viktigt skilja på klassen och en instans av klassen. Det kan exemplevis finnas en klass som beskriver vad en bil är och olika metoder som den kan utföra.
        För att skapa en specifik bil skapas en instans av bilklassen. Inkapsling gör att vi kan skapa något som liknar ett API mot klassen där de som använder klassen inte behöver ha någon vetskap om dess implementation.
        På det sättet är det möjligt att ändra hur en klass fungerar internt utan att de som använder klassen behöver göra några ändringar.
    </p>

    <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
    <p>
        De delar vi har arbetat med än så länge känns ganska tydliga. Det finns en del mappar som jag ännu inte riktigt vet vad de är till för som translations, var, vendor etc.
        Detta antar jag att man kommer få grepp om under kursens gång. Jag har tidigare arbetat en del med django vilket verkar ha en liknande struktur med mvc tankesättet så det blir intressant att jämföra dessa.
    </p>

    <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h3>
    <p>
        Jag har inte hunnit läsa allt än men jag tycker att det är intressant att läsa om tester och testdriven utveckling.
        Det är en del som jag skulle vilja bli bättre på och har delvis experimenterat med på egna projekt. Kombinationen av funktionella och unit test är spännande.
    </p>

    <h3>Vilken är din TIL för detta kmom?</h3>
    <p>
        Det stora med det det här kursmomentet var mest bara att få fötterna lite blöta med symfony. Jag ser fram emot kommande kmom.
    </p>

    <h2 id="kmom02">Kmom02</h2>
    <h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
    <p>
        Arv är när en klass ärver egenskaper och metoder från en förälderklassdel. Det är en is-a relation.
        Komposition är en har-en relation där en klass innehåller en instans av en annan klass.
        Interface är ett löfte från en klass att erbjuda vissa metoder.
        Trait är en samling av medlemsvariabler och metoder som användas för att lägga på funktionalitet på en klass. Det blir en använder relation till klassen.
    </p>


    <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
    <p>Jag tycker att min lösning blev ganska bra. Just nu ligger möjliga suits och values på kort i kortklassen. Egentligen skulle man kanske vilja att detta löses på ett annat sätt.
        Om man exemplevis skulle vilja ha andra suits eller värden än vad som är standard i en kortlek. För API-delen blev jag lite förvirrad vad man ville då det inte går att nå POST via webbläsaren.
        Jag provade att köra mina routes med curl så att de fungerade och det gick men sedan fick jag förslag att skapa formulär på /api routen vilket jag då gjorde istället.
        För att inte skicka parametrar via url så skapade jag en separat route /api/deck/draw-mutliple som använde Request istället.
        Jag gjorde också lite kontroll av vad som gavs för parametrar till min klasskonstruktorer för att se till att rätt värden gavs och kastade annars en beskrivande InvalidArgumentException.
        Jag tror att det kan vara nyttigt att jobba lite mer på det sättet med att försöka bygga lite stabilare lösningar då det ofta på skoluppgifterna blir att man endast löser exakt den inputen som finns i kraven och hanterar inget när det går fel.
        Nu var inte detta fullständigt men ett steg i rätt riktning skulle jag tro.
    </p>

    <h3>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
    <p>
        Jag måste säga att det känns trevligt. View och Controller känns som att det är ganska enkelt att jobba med och flödet känns naturligt.
    </p>

    <h3>Vilken är din TIL för detta kmom?</h3>
    <p>
        Det kändes givande att fundera över hur man skulle strukturera klasserna på bästa sätt.
    </p>

    <h2 id="kmom03">Kmom03</h2>
    <h3>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h3>
    <p>
        Jag tycker att det är ganska trevligt faktiskt. Något jag lagt märke till är att jag nästan tycker att det
        är lättare att utföra detta skede med papper och penna snarare än på datorn. Att sitta och mecka med någon
        programvara för att rita flödesdiagramet känns som att det blir lite jobbigare att göra. Har dock blivit bättre
        med draw.io nu för att rita UML och flödesdiagram vilket gör att det känns mer naturligt jämfört med första gångerna jag skulle göra det.
        Jag följde kanske inte strukturen helt för hur psuedokoden skulle se ut utan gick kanske lite mer mot naturligtspråk än
        vad exemplena visade. Jag tycker dock att det uppfyllde sin funktion.

    <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h3>
    <p>
        Jag är lite osäker kring om mitt sätt att hantera spelaren i relation till spelet var det bästa sättet.
        Hade det varit ett konsolprogram hade jag förmodligen gjort det lite annorlunda men nu byggde jag routes
        som gick att nå med knapparna på spelsidan där spelaren drog kort och slutade spela. Jag vet inte om lite
        för mycket logik kod möjligen hamnade i controllern här. I TwentyOneGame klassen kollade jag sedan bara om spelaren
        var klar eller inte.
    </p>
    <p>
        Jag gjorde först en implementation där jag inte hade någon klass gör själva spelet utan endast för spelarna.
        Detta resulterade i alldeles för mycket kod i controllern så jag valde att göra om det och skapa en TwentyOneGame klass.
        Jag kunde dock använda det mesta av det jag gjort innan fast bara flytta runt det lite. Det som gjorde det mycket enklare
        var att jag då kunde spara endast en instans av spelet i sessionen och inte en instans för spelare,bank och kortlek.
    </p>
    <p>
        Jag är osäker på om jag tänkt rätt angående dependecy injections.
        Jag ser till att för konstruktorn av TwentyOneGame så skickar jag in instanser av Player, Bank och Deck istället för att skapa dem i konstruktorn.
        Jag skapar dock bara instansen av TwentyOneGame med new TwentyOneGame(new Player(new CardHand()), new Bank(new CardHand()), new Deck());
        Jag antar att det då inte gör någon större skillnad egentligen. Här borde jag förmodligen nästa gång använda mig av ett interface nästa gång
        för att jag ska få någon potentiell nytta av dependecy injections.
    </p>

    <h3>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h3>
    <p>
        Inga konstigheter än så länge. Jag tycker att det är ganska lättarbetat och inget som är ivägen.
        Det är trevligt att arbeta med session i symfony.
        Jag tycker även att faktum att man i php kan skicka in hela objekt i session jämfört med python där man
        måste serialisera objekt är en stor fördel.
    </p>

    <h3>Vilken är din TIL för detta kmom?</h3>
    <p>
        Att arbeta med hela problemlösningsflödet är kul. Både att tänka generellt och att passa in det till miljön man arbetar i.
    </p>

    <h2 id="kmom04">Kmom04</h2>
    <h3>
        Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.
    </h3>
    <p>
        Än så länge upplever jag det som ganska likt hur vi jobbade med tester i oopython-kursen. Jag tycker att det känns som en bra ide att arbeta med
        testerna antingen på med ett TDD tänk eller iallafall skriva testerna mer kontinuerligt. Fördelarna upplevs inte som riktigt lika stora när det skrivs i efterhand.
        Men det är förmodligen bättre att skriva testerna sent än aldrig. Arbetar jag vidare med koden nu så kan jag vara fortsatt försäkrad om att den nuvarande funktionaliteten består.
    </p>
    <h3>
        Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?
    </h3>
    <p>
        Jag nöjde mig vid 91% kodtäckning. Det fanns några enkla metoder till att testa men jag nöjde mig där.
    </p>

    <h3>
        Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?
    </h3>
    <p>
        Jag tycker att det är lite svårt att veta hur vissa delar skulle testas. Exempelvis en sortering av kortleken.
        Om den endast sorteras enligt sort($this->cards) så blir testet av det lite konstigt kan jag tycka. Jag vet inte om jag borde hårdkoda i testet exakt
        den ordningen jag vill ha av mina kort likt [[A of spades], [A of hearts] ...]. 
        Jag har försökt jobba mycket med dependecy injections vilket jag tror har gjort koden mer testbar. 
    </p>

    <h3>
        Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.
    </h3>
    <p>
        Jag lade till lite kod när det kom till getters. Jag frågade om det i chatten också och lärde mig att det är lite gråskala på om det är något som strikt bör undvikas eller inte.
        Men nu är det gjort och får vara så tillsvidare så ska jag fundera igenom det lite extra nästa gång det uppstår. Jag tror nog att det vid vissa tillfällen hade lite med att göra gettern förmodligen var ett ganska naturlig del av api:t som ännu inte använts.
    </p>

    <h3>
        Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.
    </h3>
    <p>
        En del av designprinciperna som dependency injections förenklar åtminstone testning. Jag tror att om man arbeta med att skriva tester ofta så borde
        det kunna hjälpa att se till att man skriver den koden som faktiskt behövs och kanske förtydligar och delar upp koden på ett bättre sätt.
        Det är också rimligt att tänka sig att kod faktiskt måste vara testbar för att den ska fungera i stor skala och att "snygg och ren" kod då faktiskt
        i någon mån definieras av att den är testbar. Alltså kod kan endast klassas som snygg och ren om den är testbar.
    </p>

    <h3>
        Vilken är din TIL för detta kmom?
    </h3>
    <p>
        Övning med enhetstester. Jag vill bli bättre på det och arbeta med det mer kontinuerligt.
    </p>



{% endblock %}